<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Standing on the shoulders of giants (Posts about testing)</title><link>http://mattchoplin.com/</link><description></description><atom:link href="http://mattchoplin.com/categories/testing.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Sat, 17 Jun 2017 08:26:48 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Python testing with doctest and unittest</title><link>http://mattchoplin.com/posts/python-testing-with-unittest.html</link><dc:creator>Matthieu Choplin</dc:creator><description>&lt;div&gt;&lt;div class="section" id="the-problem"&gt;
&lt;h2&gt;The problem:&lt;/h2&gt;
&lt;p&gt;We want to create a function that is able to determine whether a string is a palindrome.&lt;/p&gt;
&lt;p&gt;A palindrome is a word that is read the same from front-to-back and from back-to-front.&lt;/p&gt;
&lt;p&gt;For instance, the words "noon" and "racecar" are both palindromes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="algorithm"&gt;
&lt;h2&gt;Algorithm:&lt;/h2&gt;
&lt;p&gt;Reverse the string.&lt;/p&gt;
&lt;p&gt;Compare the reversed string to the original string.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="recipe-for-designing-functions"&gt;
&lt;h2&gt;Recipe for designing functions:&lt;/h2&gt;
&lt;ol class="arabic simple" start="0"&gt;
&lt;li&gt;Give the function a name&lt;/li&gt;
&lt;li&gt;Examples&lt;/li&gt;
&lt;li&gt;Type Contract&lt;/li&gt;
&lt;li&gt;Header&lt;/li&gt;
&lt;li&gt;Description&lt;/li&gt;
&lt;li&gt;Body&lt;/li&gt;
&lt;li&gt;Test&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;First, we will see the python module &lt;em&gt;doctest&lt;/em&gt; which is good for having an up to date documentation.&lt;/p&gt;
&lt;p&gt;But using &lt;em&gt;doctest&lt;/em&gt; is not recommended for testing a whole program. This is why we will see the python module &lt;em&gt;unittest&lt;/em&gt; which is more relevant.&lt;/p&gt;
&lt;p&gt;For more about the cons of using &lt;em&gt;doctest&lt;/em&gt;: &lt;a class="reference external" href="http://bemusement.org/narrative-tests"&gt;Narrative tests are lousy tests&lt;/a&gt; and &lt;a class="reference external" href="http://bemusement.org/doctests-arent-code"&gt;Tests are code and doctests are not&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Create the file &lt;em&gt;palindrome.py&lt;/em&gt;:&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_0e52c184e3e3487d81c210ab3404d701-1"&gt;&lt;/a&gt;&lt;span class="ch"&gt;#! /usr/bin/python2.7&lt;/span&gt;
&lt;a name="rest_code_0e52c184e3e3487d81c210ab3404d701-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_0e52c184e3e3487d81c210ab3404d701-3"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_palindrome&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_0e52c184e3e3487d81c210ab3404d701-4"&gt;&lt;/a&gt;    &lt;span class="sd"&gt;"""(str) -&amp;gt; bool&lt;/span&gt;
&lt;a name="rest_code_0e52c184e3e3487d81c210ab3404d701-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_0e52c184e3e3487d81c210ab3404d701-6"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    Return True if and only if s is a palindrome.&lt;/span&gt;
&lt;a name="rest_code_0e52c184e3e3487d81c210ab3404d701-7"&gt;&lt;/a&gt;
&lt;a name="rest_code_0e52c184e3e3487d81c210ab3404d701-8"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; is_palindrome('noon')&lt;/span&gt;
&lt;a name="rest_code_0e52c184e3e3487d81c210ab3404d701-9"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    True&lt;/span&gt;
&lt;a name="rest_code_0e52c184e3e3487d81c210ab3404d701-10"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; is_palindrome('racecar')&lt;/span&gt;
&lt;a name="rest_code_0e52c184e3e3487d81c210ab3404d701-11"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    True&lt;/span&gt;
&lt;a name="rest_code_0e52c184e3e3487d81c210ab3404d701-12"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; is_palindrome('dented')&lt;/span&gt;
&lt;a name="rest_code_0e52c184e3e3487d81c210ab3404d701-13"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    False&lt;/span&gt;
&lt;a name="rest_code_0e52c184e3e3487d81c210ab3404d701-14"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    """&lt;/span&gt;
&lt;a name="rest_code_0e52c184e3e3487d81c210ab3404d701-15"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;
&lt;a name="rest_code_0e52c184e3e3487d81c210ab3404d701-16"&gt;&lt;/a&gt;
&lt;a name="rest_code_0e52c184e3e3487d81c210ab3404d701-17"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_0e52c184e3e3487d81c210ab3404d701-18"&gt;&lt;/a&gt;    &lt;span class="sd"&gt;"""(str) -&amp;gt; str&lt;/span&gt;
&lt;a name="rest_code_0e52c184e3e3487d81c210ab3404d701-19"&gt;&lt;/a&gt;
&lt;a name="rest_code_0e52c184e3e3487d81c210ab3404d701-20"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    Return the reversed string.&lt;/span&gt;
&lt;a name="rest_code_0e52c184e3e3487d81c210ab3404d701-21"&gt;&lt;/a&gt;
&lt;a name="rest_code_0e52c184e3e3487d81c210ab3404d701-22"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; reverse('hello')&lt;/span&gt;
&lt;a name="rest_code_0e52c184e3e3487d81c210ab3404d701-23"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    'olleh'&lt;/span&gt;
&lt;a name="rest_code_0e52c184e3e3487d81c210ab3404d701-24"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; reverse('a')&lt;/span&gt;
&lt;a name="rest_code_0e52c184e3e3487d81c210ab3404d701-25"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    'a'&lt;/span&gt;
&lt;a name="rest_code_0e52c184e3e3487d81c210ab3404d701-26"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    """&lt;/span&gt;
&lt;a name="rest_code_0e52c184e3e3487d81c210ab3404d701-27"&gt;&lt;/a&gt;    &lt;span class="n"&gt;rev&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;
&lt;a name="rest_code_0e52c184e3e3487d81c210ab3404d701-28"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# for each character in s, add the character at the beginning of rev.&lt;/span&gt;
&lt;a name="rest_code_0e52c184e3e3487d81c210ab3404d701-29"&gt;&lt;/a&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;char&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_0e52c184e3e3487d81c210ab3404d701-30"&gt;&lt;/a&gt;        &lt;span class="n"&gt;rev&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;char&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;rev&lt;/span&gt;
&lt;a name="rest_code_0e52c184e3e3487d81c210ab3404d701-31"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;rev&lt;/span&gt;
&lt;a name="rest_code_0e52c184e3e3487d81c210ab3404d701-32"&gt;&lt;/a&gt;
&lt;a name="rest_code_0e52c184e3e3487d81c210ab3404d701-33"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;doctest&lt;/span&gt;
&lt;a name="rest_code_0e52c184e3e3487d81c210ab3404d701-34"&gt;&lt;/a&gt;&lt;span class="n"&gt;doctest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;testmod&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;We want to separate the tests from the main program and use the python &lt;em&gt;unittest&lt;/em&gt; module.&lt;/p&gt;
&lt;p&gt;Create the file test_palindromes.py&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_cc1a3ea457bf42afb7db5d828e06eb01-1"&gt;&lt;/a&gt;&lt;span class="ch"&gt;#! /usr/bin/python2.7&lt;/span&gt;
&lt;a name="rest_code_cc1a3ea457bf42afb7db5d828e06eb01-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_cc1a3ea457bf42afb7db5d828e06eb01-3"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt;
&lt;a name="rest_code_cc1a3ea457bf42afb7db5d828e06eb01-4"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;palindromes&lt;/span&gt;
&lt;a name="rest_code_cc1a3ea457bf42afb7db5d828e06eb01-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_cc1a3ea457bf42afb7db5d828e06eb01-6"&gt;&lt;/a&gt;
&lt;a name="rest_code_cc1a3ea457bf42afb7db5d828e06eb01-7"&gt;&lt;/a&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestPalindrome&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_cc1a3ea457bf42afb7db5d828e06eb01-8"&gt;&lt;/a&gt;
&lt;a name="rest_code_cc1a3ea457bf42afb7db5d828e06eb01-9"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_is_palindrome_true&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_cc1a3ea457bf42afb7db5d828e06eb01-10"&gt;&lt;/a&gt;        &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;palindromes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_palindrome&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'racecar'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_cc1a3ea457bf42afb7db5d828e06eb01-11"&gt;&lt;/a&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEquals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_cc1a3ea457bf42afb7db5d828e06eb01-12"&gt;&lt;/a&gt;
&lt;a name="rest_code_cc1a3ea457bf42afb7db5d828e06eb01-13"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_is_palindrome_false&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_cc1a3ea457bf42afb7db5d828e06eb01-14"&gt;&lt;/a&gt;        &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;palindromes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_palindrome&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'dedent'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_cc1a3ea457bf42afb7db5d828e06eb01-15"&gt;&lt;/a&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEquals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_cc1a3ea457bf42afb7db5d828e06eb01-16"&gt;&lt;/a&gt;
&lt;a name="rest_code_cc1a3ea457bf42afb7db5d828e06eb01-17"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_reverse_normal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_cc1a3ea457bf42afb7db5d828e06eb01-18"&gt;&lt;/a&gt;        &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;palindromes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'hello'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_cc1a3ea457bf42afb7db5d828e06eb01-19"&gt;&lt;/a&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEquals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'olleh'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_cc1a3ea457bf42afb7db5d828e06eb01-20"&gt;&lt;/a&gt;
&lt;a name="rest_code_cc1a3ea457bf42afb7db5d828e06eb01-21"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_reverse_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_cc1a3ea457bf42afb7db5d828e06eb01-22"&gt;&lt;/a&gt;        &lt;span class="n"&gt;list_of_bad_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
&lt;a name="rest_code_cc1a3ea457bf42afb7db5d828e06eb01-23"&gt;&lt;/a&gt;        &lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_cc1a3ea457bf42afb7db5d828e06eb01-24"&gt;&lt;/a&gt;        &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_cc1a3ea457bf42afb7db5d828e06eb01-25"&gt;&lt;/a&gt;        &lt;span class="p"&gt;]&lt;/span&gt;
&lt;a name="rest_code_cc1a3ea457bf42afb7db5d828e06eb01-26"&gt;&lt;/a&gt;        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;bad_value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;list_of_bad_value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_cc1a3ea457bf42afb7db5d828e06eb01-27"&gt;&lt;/a&gt;            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertRaises&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;a name="rest_code_cc1a3ea457bf42afb7db5d828e06eb01-28"&gt;&lt;/a&gt;                &lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_cc1a3ea457bf42afb7db5d828e06eb01-29"&gt;&lt;/a&gt;                &lt;span class="n"&gt;palindromes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_cc1a3ea457bf42afb7db5d828e06eb01-30"&gt;&lt;/a&gt;                &lt;span class="n"&gt;bad_value&lt;/span&gt;
&lt;a name="rest_code_cc1a3ea457bf42afb7db5d828e06eb01-31"&gt;&lt;/a&gt;            &lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_cc1a3ea457bf42afb7db5d828e06eb01-32"&gt;&lt;/a&gt;
&lt;a name="rest_code_cc1a3ea457bf42afb7db5d828e06eb01-33"&gt;&lt;/a&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_cc1a3ea457bf42afb7db5d828e06eb01-34"&gt;&lt;/a&gt;    &lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="choosing-test-cases-to-test"&gt;
&lt;h2&gt;Choosing test cases to test&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Size: For collections, test with an empty collection, a collection with 1 item, the smallest interesting case, and a
collection with several items&lt;/li&gt;
&lt;li&gt;Dichotomies: Vowels/Non Vowels, even/odd, positive/negative, empty/full, and so on.&lt;/li&gt;
&lt;li&gt;Boundaries: If the function behaves differently for values near a particular threshold, test at that threshold.&lt;/li&gt;
&lt;li&gt;Order: If the function behaves differently when the values are in different orders, identify and test each of those
orders.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Source: &lt;a class="reference external" href="https://class.coursera.org/programming2-001"&gt;https://class.coursera.org/programming2-001&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>python</category><category>testing</category><guid>http://mattchoplin.com/posts/python-testing-with-unittest.html</guid><pubDate>Wed, 12 Nov 2014 15:02:45 GMT</pubDate></item><item><title>Agile testing</title><link>http://mattchoplin.com/posts/agile-testing.html</link><dc:creator>Matthieu Choplin</dc:creator><description>&lt;div&gt;&lt;p&gt;The best book I ever read about testing and best practices in an Agile project is: Agile Testing: A Practical Guide for Testers and Agile Teams (Addison-Wesley Signature)&lt;/p&gt;
&lt;p&gt;The main idea of Agility is constantly giving and receiving &lt;em&gt;feedback&lt;/em&gt; in order to keep improving the process and the output of the project.&lt;/p&gt;
&lt;img alt="Testing quadrant" class="well-large align-center" src="http://i.imgur.com/66JWt3b.png"&gt;&lt;/div&gt;</description><category>agile</category><category>testing</category><guid>http://mattchoplin.com/posts/agile-testing.html</guid><pubDate>Tue, 29 Jul 2014 15:19:08 GMT</pubDate></item></channel></rss>