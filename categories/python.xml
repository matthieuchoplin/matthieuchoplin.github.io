<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Standing on the shoulders of giants (Posts about python)</title><link>http://mattchoplin.com/</link><description></description><atom:link href="http://mattchoplin.com/categories/python.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Fri, 07 Jun 2019 09:55:32 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>String in python2 vs python3</title><link>http://mattchoplin.com/posts/string-in-python2-vs-python3/</link><dc:creator>Matthieu Choplin</dc:creator><description>&lt;div class="section" id="difference-between-basestring-and-str-in-python"&gt;
&lt;h2&gt;Difference between &lt;em&gt;basestring&lt;/em&gt; and &lt;em&gt;str&lt;/em&gt; in python&lt;/h2&gt;
&lt;p&gt;In Python versions prior to 3.0 there are two kinds of strings "plain strings" and "unicode strings". Plain strings (str) cannot represent characters outside of the Latin alphabet (ignoring details of code pages for simplicity). Unicode strings (unicode) can represent characters from any alphabet including some fictional ones like Klingon.&lt;/p&gt;
&lt;p&gt;So why have two kinds of strings, would it not be better to just have Unicode since that would cover all the cases? Well it is better to have only Unicode but Python was created before Unicode was the preferred method for representing strings. It takes time to transition the string type in a language with many users, in Python 3.0 it is finally the case that all strings are Unicode.&lt;/p&gt;
&lt;p&gt;The inheritance hierarchy of Python strings pre-3.0 is:&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_f76b16ff162d4ec89f2b7db5e470652b-1"&gt;&lt;/a&gt; object
&lt;a name="rest_code_f76b16ff162d4ec89f2b7db5e470652b-2"&gt;&lt;/a&gt;    &lt;span class="p"&gt;|&lt;/span&gt;
&lt;a name="rest_code_f76b16ff162d4ec89f2b7db5e470652b-3"&gt;&lt;/a&gt;    &lt;span class="p"&gt;|&lt;/span&gt;
&lt;a name="rest_code_f76b16ff162d4ec89f2b7db5e470652b-4"&gt;&lt;/a&gt;basestring
&lt;a name="rest_code_f76b16ff162d4ec89f2b7db5e470652b-5"&gt;&lt;/a&gt;   / &lt;span class="se"&gt;\&lt;/span&gt;
&lt;a name="rest_code_f76b16ff162d4ec89f2b7db5e470652b-6"&gt;&lt;/a&gt;  /   &lt;span class="se"&gt;\&lt;/span&gt;
&lt;a name="rest_code_f76b16ff162d4ec89f2b7db5e470652b-7"&gt;&lt;/a&gt;str  unicode
&lt;/pre&gt;&lt;p&gt;'basestring' introduced in Python 2.3 can be thought of as a step in the direction of string unification as it can be used to check whether an object is an instance of str or unicode&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_4d7f4f9a8dfa49a8878d72c5509772f9-1"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;string1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"I am a plain string"&lt;/span&gt;
&lt;a name="rest_code_4d7f4f9a8dfa49a8878d72c5509772f9-2"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;string2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s2"&gt;"I am a unicode string"&lt;/span&gt;
&lt;a name="rest_code_4d7f4f9a8dfa49a8878d72c5509772f9-3"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_4d7f4f9a8dfa49a8878d72c5509772f9-4"&gt;&lt;/a&gt;&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;a name="rest_code_4d7f4f9a8dfa49a8878d72c5509772f9-5"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_4d7f4f9a8dfa49a8878d72c5509772f9-6"&gt;&lt;/a&gt;&lt;span class="bp"&gt;False&lt;/span&gt;
&lt;a name="rest_code_4d7f4f9a8dfa49a8878d72c5509772f9-7"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;unicode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_4d7f4f9a8dfa49a8878d72c5509772f9-8"&gt;&lt;/a&gt;&lt;span class="bp"&gt;False&lt;/span&gt;
&lt;a name="rest_code_4d7f4f9a8dfa49a8878d72c5509772f9-9"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;unicode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_4d7f4f9a8dfa49a8878d72c5509772f9-10"&gt;&lt;/a&gt;&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;a name="rest_code_4d7f4f9a8dfa49a8878d72c5509772f9-11"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;basestring&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_4d7f4f9a8dfa49a8878d72c5509772f9-12"&gt;&lt;/a&gt;&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;a name="rest_code_4d7f4f9a8dfa49a8878d72c5509772f9-13"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;basestring&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_4d7f4f9a8dfa49a8878d72c5509772f9-14"&gt;&lt;/a&gt;&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Source: &lt;a class="reference external" href="https://stackoverflow.com/questions/1979004/what-is-the-difference-between-isinstanceaaa-basestring-and-isinstanceaaa"&gt;https://stackoverflow.com/questions/1979004/what-is-the-difference-between-isinstanceaaa-basestring-and-isinstanceaaa&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;</description><category>python</category><guid>http://mattchoplin.com/posts/string-in-python2-vs-python3/</guid><pubDate>Thu, 17 Aug 2017 11:35:28 GMT</pubDate></item><item><title>defaultdict of defaultdict, nested</title><link>http://mattchoplin.com/posts/defaultdict-of-defaultdict-nested/</link><dc:creator>Matthieu Choplin</dc:creator><description>&lt;div&gt;&lt;p&gt;Creating arbitrary level of nested dictionaries using &lt;a class="reference external" href="https://docs.python.org/2/library/collections.html#collections.defaultdict"&gt;defaultdict&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_2741c760941c4bd5aba1425384cbcbe9-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;defaultdict&lt;/span&gt;
&lt;a name="rest_code_2741c760941c4bd5aba1425384cbcbe9-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_2741c760941c4bd5aba1425384cbcbe9-3"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;recursive_defaultdict&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;a name="rest_code_2741c760941c4bd5aba1425384cbcbe9-4"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;defaultdict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;recursive_defaultdict&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;pre class="code python"&gt;&lt;a name="rest_code_319325d0bdaa4526b594e3cc0f7141a5-1"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;recursive_defaultdict&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_319325d0bdaa4526b594e3cc0f7141a5-2"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'c'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'d'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;a name="rest_code_319325d0bdaa4526b594e3cc0f7141a5-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;defaultdict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="n"&gt;recursive_defaultdict&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x7fbf9b0496e0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt;
&lt;a name="rest_code_319325d0bdaa4526b594e3cc0f7141a5-4"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;a name="rest_code_319325d0bdaa4526b594e3cc0f7141a5-5"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_319325d0bdaa4526b594e3cc0f7141a5-6"&gt;&lt;/a&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"b"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"c"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"d"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}}}}}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;With a lambda:&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_94cd02215fee40e39ae30a67656a706d-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;recursive_defaultdict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;defaultdict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rec_dd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Source: &lt;a class="reference external" href="https://stackoverflow.com/questions/19189274/defaultdict-of-defaultdict-nested"&gt;https://stackoverflow.com/questions/19189274/defaultdict-of-defaultdict-nested&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>defaultdict</category><category>python</category><guid>http://mattchoplin.com/posts/defaultdict-of-defaultdict-nested/</guid><pubDate>Wed, 09 Aug 2017 15:38:01 GMT</pubDate></item><item><title>Sorting a list with two criteria in python</title><link>http://mattchoplin.com/posts/sorting-list-with-two-criteria/</link><dc:creator>Matthieu Choplin</dc:creator><description>&lt;div&gt;&lt;p&gt;We want to sort a list of elements with the first element in ascending order and the second element in descending order.&lt;/p&gt;
&lt;div class="section" id="using-the-lambda-function"&gt;
&lt;h2&gt;Using the lambda function:&lt;/h2&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_8d9255fed0da4941aa667baee99c001c-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;occurences&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'bat'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'mat'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'cat'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_8d9255fed0da4941aa667baee99c001c-2"&gt;&lt;/a&gt;&lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;occurences&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;The -x[1] is for the reversed sort.&lt;/p&gt;
&lt;p&gt;By order of priority, we first sort with the 2nd element (x[1]), then with the 1st element (x[0])&lt;/p&gt;
&lt;p&gt;Example for an interview question:&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>python</category><guid>http://mattchoplin.com/posts/sorting-list-with-two-criteria/</guid><pubDate>Sun, 11 Dec 2016 10:26:07 GMT</pubDate></item><item><title>Python testing with doctest and unittest</title><link>http://mattchoplin.com/posts/python-testing-with-unittest/</link><dc:creator>Matthieu Choplin</dc:creator><description>&lt;div&gt;&lt;div class="section" id="the-problem"&gt;
&lt;h2&gt;The problem:&lt;/h2&gt;
&lt;p&gt;We want to create a function that is able to determine whether a string is a palindrome.&lt;/p&gt;
&lt;p&gt;A palindrome is a word that is read the same from front-to-back and from back-to-front.&lt;/p&gt;
&lt;p&gt;For instance, the words "noon" and "racecar" are both palindromes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="algorithm"&gt;
&lt;h2&gt;Algorithm:&lt;/h2&gt;
&lt;p&gt;Reverse the string.&lt;/p&gt;
&lt;p&gt;Compare the reversed string to the original string.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="recipe-for-designing-functions"&gt;
&lt;h2&gt;Recipe for designing functions:&lt;/h2&gt;
&lt;ol class="arabic simple" start="0"&gt;
&lt;li&gt;Give the function a name&lt;/li&gt;
&lt;li&gt;Examples&lt;/li&gt;
&lt;li&gt;Type Contract&lt;/li&gt;
&lt;li&gt;Header&lt;/li&gt;
&lt;li&gt;Description&lt;/li&gt;
&lt;li&gt;Body&lt;/li&gt;
&lt;li&gt;Test&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;First, we will see the python module &lt;em&gt;doctest&lt;/em&gt; which is good for having an up to date documentation.&lt;/p&gt;
&lt;p&gt;But using &lt;em&gt;doctest&lt;/em&gt; is not recommended for testing a whole program. This is why we will see the python module &lt;em&gt;unittest&lt;/em&gt; which is more relevant.&lt;/p&gt;
&lt;p&gt;For more about the cons of using &lt;em&gt;doctest&lt;/em&gt;: &lt;a class="reference external" href="http://bemusement.org/narrative-tests"&gt;Narrative tests are lousy tests&lt;/a&gt; and &lt;a class="reference external" href="http://bemusement.org/doctests-arent-code"&gt;Tests are code and doctests are not&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Create the file &lt;em&gt;palindrome.py&lt;/em&gt;:&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_e172e3dfab6a42f18c36fba0fa092d34-1"&gt;&lt;/a&gt;&lt;span class="ch"&gt;#! /usr/bin/python2.7&lt;/span&gt;
&lt;a name="rest_code_e172e3dfab6a42f18c36fba0fa092d34-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_e172e3dfab6a42f18c36fba0fa092d34-3"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_palindrome&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_e172e3dfab6a42f18c36fba0fa092d34-4"&gt;&lt;/a&gt;    &lt;span class="sd"&gt;"""(str) -&amp;gt; bool&lt;/span&gt;
&lt;a name="rest_code_e172e3dfab6a42f18c36fba0fa092d34-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_e172e3dfab6a42f18c36fba0fa092d34-6"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    Return True if and only if s is a palindrome.&lt;/span&gt;
&lt;a name="rest_code_e172e3dfab6a42f18c36fba0fa092d34-7"&gt;&lt;/a&gt;
&lt;a name="rest_code_e172e3dfab6a42f18c36fba0fa092d34-8"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; is_palindrome('noon')&lt;/span&gt;
&lt;a name="rest_code_e172e3dfab6a42f18c36fba0fa092d34-9"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    True&lt;/span&gt;
&lt;a name="rest_code_e172e3dfab6a42f18c36fba0fa092d34-10"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; is_palindrome('racecar')&lt;/span&gt;
&lt;a name="rest_code_e172e3dfab6a42f18c36fba0fa092d34-11"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    True&lt;/span&gt;
&lt;a name="rest_code_e172e3dfab6a42f18c36fba0fa092d34-12"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; is_palindrome('dented')&lt;/span&gt;
&lt;a name="rest_code_e172e3dfab6a42f18c36fba0fa092d34-13"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    False&lt;/span&gt;
&lt;a name="rest_code_e172e3dfab6a42f18c36fba0fa092d34-14"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    """&lt;/span&gt;
&lt;a name="rest_code_e172e3dfab6a42f18c36fba0fa092d34-15"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;
&lt;a name="rest_code_e172e3dfab6a42f18c36fba0fa092d34-16"&gt;&lt;/a&gt;
&lt;a name="rest_code_e172e3dfab6a42f18c36fba0fa092d34-17"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_e172e3dfab6a42f18c36fba0fa092d34-18"&gt;&lt;/a&gt;    &lt;span class="sd"&gt;"""(str) -&amp;gt; str&lt;/span&gt;
&lt;a name="rest_code_e172e3dfab6a42f18c36fba0fa092d34-19"&gt;&lt;/a&gt;
&lt;a name="rest_code_e172e3dfab6a42f18c36fba0fa092d34-20"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    Return the reversed string.&lt;/span&gt;
&lt;a name="rest_code_e172e3dfab6a42f18c36fba0fa092d34-21"&gt;&lt;/a&gt;
&lt;a name="rest_code_e172e3dfab6a42f18c36fba0fa092d34-22"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; reverse('hello')&lt;/span&gt;
&lt;a name="rest_code_e172e3dfab6a42f18c36fba0fa092d34-23"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    'olleh'&lt;/span&gt;
&lt;a name="rest_code_e172e3dfab6a42f18c36fba0fa092d34-24"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; reverse('a')&lt;/span&gt;
&lt;a name="rest_code_e172e3dfab6a42f18c36fba0fa092d34-25"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    'a'&lt;/span&gt;
&lt;a name="rest_code_e172e3dfab6a42f18c36fba0fa092d34-26"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    """&lt;/span&gt;
&lt;a name="rest_code_e172e3dfab6a42f18c36fba0fa092d34-27"&gt;&lt;/a&gt;    &lt;span class="n"&gt;rev&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;
&lt;a name="rest_code_e172e3dfab6a42f18c36fba0fa092d34-28"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# for each character in s, add the character at the beginning of rev.&lt;/span&gt;
&lt;a name="rest_code_e172e3dfab6a42f18c36fba0fa092d34-29"&gt;&lt;/a&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;char&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_e172e3dfab6a42f18c36fba0fa092d34-30"&gt;&lt;/a&gt;        &lt;span class="n"&gt;rev&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;char&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;rev&lt;/span&gt;
&lt;a name="rest_code_e172e3dfab6a42f18c36fba0fa092d34-31"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;rev&lt;/span&gt;
&lt;a name="rest_code_e172e3dfab6a42f18c36fba0fa092d34-32"&gt;&lt;/a&gt;
&lt;a name="rest_code_e172e3dfab6a42f18c36fba0fa092d34-33"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;doctest&lt;/span&gt;
&lt;a name="rest_code_e172e3dfab6a42f18c36fba0fa092d34-34"&gt;&lt;/a&gt;&lt;span class="n"&gt;doctest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;testmod&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;We want to separate the tests from the main program and use the python &lt;em&gt;unittest&lt;/em&gt; module.&lt;/p&gt;
&lt;p&gt;Create the file test_palindromes.py&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_7d352ad0b5bf45038f2c3b7fbde5eba5-1"&gt;&lt;/a&gt;&lt;span class="ch"&gt;#! /usr/bin/python2.7&lt;/span&gt;
&lt;a name="rest_code_7d352ad0b5bf45038f2c3b7fbde5eba5-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_7d352ad0b5bf45038f2c3b7fbde5eba5-3"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt;
&lt;a name="rest_code_7d352ad0b5bf45038f2c3b7fbde5eba5-4"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;palindromes&lt;/span&gt;
&lt;a name="rest_code_7d352ad0b5bf45038f2c3b7fbde5eba5-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_7d352ad0b5bf45038f2c3b7fbde5eba5-6"&gt;&lt;/a&gt;
&lt;a name="rest_code_7d352ad0b5bf45038f2c3b7fbde5eba5-7"&gt;&lt;/a&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestPalindrome&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_7d352ad0b5bf45038f2c3b7fbde5eba5-8"&gt;&lt;/a&gt;
&lt;a name="rest_code_7d352ad0b5bf45038f2c3b7fbde5eba5-9"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_is_palindrome_true&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_7d352ad0b5bf45038f2c3b7fbde5eba5-10"&gt;&lt;/a&gt;        &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;palindromes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_palindrome&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'racecar'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_7d352ad0b5bf45038f2c3b7fbde5eba5-11"&gt;&lt;/a&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEquals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_7d352ad0b5bf45038f2c3b7fbde5eba5-12"&gt;&lt;/a&gt;
&lt;a name="rest_code_7d352ad0b5bf45038f2c3b7fbde5eba5-13"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_is_palindrome_false&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_7d352ad0b5bf45038f2c3b7fbde5eba5-14"&gt;&lt;/a&gt;        &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;palindromes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_palindrome&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'dedent'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_7d352ad0b5bf45038f2c3b7fbde5eba5-15"&gt;&lt;/a&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEquals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_7d352ad0b5bf45038f2c3b7fbde5eba5-16"&gt;&lt;/a&gt;
&lt;a name="rest_code_7d352ad0b5bf45038f2c3b7fbde5eba5-17"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_reverse_normal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_7d352ad0b5bf45038f2c3b7fbde5eba5-18"&gt;&lt;/a&gt;        &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;palindromes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'hello'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_7d352ad0b5bf45038f2c3b7fbde5eba5-19"&gt;&lt;/a&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEquals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'olleh'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_7d352ad0b5bf45038f2c3b7fbde5eba5-20"&gt;&lt;/a&gt;
&lt;a name="rest_code_7d352ad0b5bf45038f2c3b7fbde5eba5-21"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_reverse_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_7d352ad0b5bf45038f2c3b7fbde5eba5-22"&gt;&lt;/a&gt;        &lt;span class="n"&gt;list_of_bad_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
&lt;a name="rest_code_7d352ad0b5bf45038f2c3b7fbde5eba5-23"&gt;&lt;/a&gt;        &lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_7d352ad0b5bf45038f2c3b7fbde5eba5-24"&gt;&lt;/a&gt;        &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_7d352ad0b5bf45038f2c3b7fbde5eba5-25"&gt;&lt;/a&gt;        &lt;span class="p"&gt;]&lt;/span&gt;
&lt;a name="rest_code_7d352ad0b5bf45038f2c3b7fbde5eba5-26"&gt;&lt;/a&gt;        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;bad_value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;list_of_bad_value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_7d352ad0b5bf45038f2c3b7fbde5eba5-27"&gt;&lt;/a&gt;            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertRaises&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;a name="rest_code_7d352ad0b5bf45038f2c3b7fbde5eba5-28"&gt;&lt;/a&gt;                &lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_7d352ad0b5bf45038f2c3b7fbde5eba5-29"&gt;&lt;/a&gt;                &lt;span class="n"&gt;palindromes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_7d352ad0b5bf45038f2c3b7fbde5eba5-30"&gt;&lt;/a&gt;                &lt;span class="n"&gt;bad_value&lt;/span&gt;
&lt;a name="rest_code_7d352ad0b5bf45038f2c3b7fbde5eba5-31"&gt;&lt;/a&gt;            &lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_7d352ad0b5bf45038f2c3b7fbde5eba5-32"&gt;&lt;/a&gt;
&lt;a name="rest_code_7d352ad0b5bf45038f2c3b7fbde5eba5-33"&gt;&lt;/a&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_7d352ad0b5bf45038f2c3b7fbde5eba5-34"&gt;&lt;/a&gt;    &lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="choosing-test-cases-to-test"&gt;
&lt;h2&gt;Choosing test cases to test&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Size: For collections, test with an empty collection, a collection with 1 item, the smallest interesting case, and a
collection with several items&lt;/li&gt;
&lt;li&gt;Dichotomies: Vowels/Non Vowels, even/odd, positive/negative, empty/full, and so on.&lt;/li&gt;
&lt;li&gt;Boundaries: If the function behaves differently for values near a particular threshold, test at that threshold.&lt;/li&gt;
&lt;li&gt;Order: If the function behaves differently when the values are in different orders, identify and test each of those
orders.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Source: &lt;a class="reference external" href="https://class.coursera.org/programming2-001"&gt;https://class.coursera.org/programming2-001&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>python</category><category>testing</category><guid>http://mattchoplin.com/posts/python-testing-with-unittest/</guid><pubDate>Wed, 12 Nov 2014 15:02:45 GMT</pubDate></item><item><title>Context Manager in Python</title><link>http://mattchoplin.com/posts/context-manager-in-python/</link><dc:creator>Matthieu Choplin</dc:creator><description>&lt;div&gt;&lt;div class="section" id="the-keyword-with"&gt;
&lt;h2&gt;The keyword &lt;em&gt;with&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;The context manager is going to be used with the keyword &lt;em&gt;with&lt;/em&gt; such as:&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_b948d198f8b04b90b149eed42c3a6be8-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;MyContextManager&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;context_var&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_b948d198f8b04b90b149eed42c3a6be8-2"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# here the statement is going to evaluate the methods&lt;/span&gt;
&lt;a name="rest_code_b948d198f8b04b90b149eed42c3a6be8-3"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# __enter__ and __exit__ of the class MyContextManager.&lt;/span&gt;
&lt;a name="rest_code_b948d198f8b04b90b149eed42c3a6be8-4"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# The value returned by __enter__ is going to be assigned&lt;/span&gt;
&lt;a name="rest_code_b948d198f8b04b90b149eed42c3a6be8-5"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# to the variable "context_var".&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="the-context-manager-can-be-defined-as-a-class"&gt;
&lt;h2&gt;The context manager can be defined as a class&lt;/h2&gt;
&lt;p&gt;Two essential methods are required for making the class a context manager:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;em&gt;__enter__(self)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Defines what the context manager should do at the &lt;strong&gt;beginning of the block&lt;/strong&gt; created by the with statement.
Note that the return value of __enter__ is bound to the target of the with statement, or the name after the as.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;em&gt;__exit__(self, exception_type, exception_value, traceback)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Defines what the context manager should do &lt;strong&gt;after its block has been executed (or terminates)&lt;/strong&gt;.
It can be used to handle exceptions, perform cleanup, or do something always done immediately after the action in the block.
If the block executes successfully, exception_type, exception_value, and traceback will be None. Otherwise, you can choose to handle the   exception or let the user handle it; if you want to handle it, make sure __exit__ returns True after all is said and done.
If you don't want the exception to be handled by the context manager, just let it happen.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="example"&gt;
&lt;h2&gt;Example&lt;/h2&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_0cae511e051647759a28b7b0160abe19-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyContextManager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_0cae511e051647759a28b7b0160abe19-2"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__enter__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_0cae511e051647759a28b7b0160abe19-3"&gt;&lt;/a&gt;        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'__enter__()'&lt;/span&gt;
&lt;a name="rest_code_0cae511e051647759a28b7b0160abe19-4"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;
&lt;a name="rest_code_0cae511e051647759a28b7b0160abe19-5"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__exit__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exception_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exception_value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;traceback&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_0cae511e051647759a28b7b0160abe19-6"&gt;&lt;/a&gt;        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'__exit__()'&lt;/span&gt;
&lt;a name="rest_code_0cae511e051647759a28b7b0160abe19-7"&gt;&lt;/a&gt;
&lt;a name="rest_code_0cae511e051647759a28b7b0160abe19-8"&gt;&lt;/a&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;MyContextManager&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;context_var&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_0cae511e051647759a28b7b0160abe19-9"&gt;&lt;/a&gt;    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'Doing work in the context'&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Where the output is:&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_c52dc9f94f7343e9869365716a8d0bf0-1"&gt;&lt;/a&gt;__enter__&lt;span class="o"&gt;()&lt;/span&gt;
&lt;a name="rest_code_c52dc9f94f7343e9869365716a8d0bf0-2"&gt;&lt;/a&gt;Doing work in the context
&lt;a name="rest_code_c52dc9f94f7343e9869365716a8d0bf0-3"&gt;&lt;/a&gt;__exit__&lt;span class="o"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="the-context-manager-can-also-be-defined-as-a-generator"&gt;
&lt;h2&gt;The Context Manager can also be defined as a Generator&lt;/h2&gt;
&lt;p&gt;Here, we use the contextlib library and the module contextmanager.&lt;/p&gt;
&lt;p&gt;The equivalent of the example above would be:&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_4e887d72c7ad4e36acf4a3239fdacac8-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;contextlib&lt;/span&gt;
&lt;a name="rest_code_4e887d72c7ad4e36acf4a3239fdacac8-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_4e887d72c7ad4e36acf4a3239fdacac8-3"&gt;&lt;/a&gt;&lt;span class="nd"&gt;@contextlib.contextmanager&lt;/span&gt;
&lt;a name="rest_code_4e887d72c7ad4e36acf4a3239fdacac8-4"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;mycontextmanager&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;a name="rest_code_4e887d72c7ad4e36acf4a3239fdacac8-5"&gt;&lt;/a&gt;    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"__enter__"&lt;/span&gt;
&lt;a name="rest_code_4e887d72c7ad4e36acf4a3239fdacac8-6"&gt;&lt;/a&gt;    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_4e887d72c7ad4e36acf4a3239fdacac8-7"&gt;&lt;/a&gt;        &lt;span class="k"&gt;yield&lt;/span&gt;
&lt;a name="rest_code_4e887d72c7ad4e36acf4a3239fdacac8-8"&gt;&lt;/a&gt;    &lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_4e887d72c7ad4e36acf4a3239fdacac8-9"&gt;&lt;/a&gt;        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"__exit__"&lt;/span&gt;
&lt;a name="rest_code_4e887d72c7ad4e36acf4a3239fdacac8-10"&gt;&lt;/a&gt;
&lt;a name="rest_code_4e887d72c7ad4e36acf4a3239fdacac8-11"&gt;&lt;/a&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;mycontextmanager&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;context_var&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_4e887d72c7ad4e36acf4a3239fdacac8-12"&gt;&lt;/a&gt;    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'Doing work in the context'&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;First we use the decorator &lt;em&gt;@contextmanager&lt;/em&gt; to indicate to Python that the function will be a context manager.&lt;/p&gt;
&lt;p&gt;Then, we do a &lt;em&gt;try/finally&lt;/em&gt; (it is not automatic like with __enter__ and __exit__).&lt;/p&gt;
&lt;p&gt;The word &lt;em&gt;yield&lt;/em&gt; split the code in two parts:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;everything that is before  &lt;em&gt;yield&lt;/em&gt; is similar to what we had above in  &lt;em&gt;__enter__&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;everything that is after is similar to &lt;em&gt;__exit__&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The content (the returned value) of &lt;em&gt;yield&lt;/em&gt; is taken in the variable 'context_var' here defined with the key word &lt;em&gt;as&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>python</category><guid>http://mattchoplin.com/posts/context-manager-in-python/</guid><pubDate>Sat, 11 Oct 2014 12:50:58 GMT</pubDate></item><item><title>Monkeypatching in python</title><link>http://mattchoplin.com/posts/monkeypatching-in-python/</link><dc:creator>Matthieu Choplin</dc:creator><description>&lt;div&gt;&lt;p&gt;A MonkeyPatch is a piece of Python code which extends or modifies other code at runtime (typically at startup). MonkeyPatching would be the practice of writing, or running, a monkeypatch.&lt;/p&gt;
&lt;p&gt;A simple example looks like this:&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_88d2baaef576467498deadabe68cedf4-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;SomeOtherProduct.SomeModule&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SomeClass&lt;/span&gt;
&lt;a name="rest_code_88d2baaef576467498deadabe68cedf4-2"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;speak&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_88d2baaef576467498deadabe68cedf4-3"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"ook ook eee eee eee!"&lt;/span&gt;
&lt;a name="rest_code_88d2baaef576467498deadabe68cedf4-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_88d2baaef576467498deadabe68cedf4-5"&gt;&lt;/a&gt;&lt;span class="n"&gt;SomeClass&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;speak&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;speak&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;In this example, if &lt;em&gt;SomeClass&lt;/em&gt; did not already have a &lt;em&gt;speak()&lt;/em&gt; method, it does now :-) If it had a speak() method before, &lt;strong&gt;the new code has replaced the old method definition&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Sources:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://web.archive.org/web/20120730014107/"&gt;https://web.archive.org/web/20120730014107/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://wiki.zope.org/zope2/MonkeyPatch"&gt;http://wiki.zope.org/zope2/MonkeyPatch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</description><category>python</category><guid>http://mattchoplin.com/posts/monkeypatching-in-python/</guid><pubDate>Fri, 26 Sep 2014 09:55:04 GMT</pubDate></item><item><title>Dummy smtp server in Python for testing</title><link>http://mattchoplin.com/posts/dummy-smtp-server-in-python-for-testing/</link><dc:creator>Matthieu Choplin</dc:creator><description>&lt;div&gt;&lt;pre class="code bash"&gt;&lt;a name="rest_code_b97aee6188564a0486317fa6c8a1f20a-1"&gt;&lt;/a&gt;sudo python -m smtpd -n -c DebuggingServer localhost:25
&lt;/pre&gt;&lt;p&gt;The sudo is needed as you can’t bind to a port number lower than 1024 as a normal user.&lt;/p&gt;
&lt;p&gt;Source: &lt;a class="reference external" href="http://www.euperia.com/development/test-smtp-with-a-dummy-server-in-python/460"&gt;http://www.euperia.com/development/test-smtp-with-a-dummy-server-in-python/460&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>python</category><guid>http://mattchoplin.com/posts/dummy-smtp-server-in-python-for-testing/</guid><pubDate>Thu, 12 Jun 2014 17:19:30 GMT</pubDate></item><item><title>Progress bar in python</title><link>http://mattchoplin.com/posts/progress-bar-in-python/</link><dc:creator>Matthieu Choplin</dc:creator><description>&lt;div&gt;&lt;p&gt;Writing 'r' will move the cursor back to the beginning of the line.&lt;/p&gt;
&lt;p&gt;This displays a percentage counter:&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_3dac57c236f940459ce9f63d61557c11-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;a name="rest_code_3dac57c236f940459ce9f63d61557c11-2"&gt;&lt;/a&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_3dac57c236f940459ce9f63d61557c11-3"&gt;&lt;/a&gt;    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_3dac57c236f940459ce9f63d61557c11-4"&gt;&lt;/a&gt;    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\r&lt;/span&gt;&lt;span class="si"&gt;%d%%&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_3dac57c236f940459ce9f63d61557c11-5"&gt;&lt;/a&gt;    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Sourcce: &lt;a class="reference external" href="http://stackoverflow.com/questions/3173320/text-progress-bar-in-the-console"&gt;http://stackoverflow.com/questions/3173320/text-progress-bar-in-the-console&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>python</category><guid>http://mattchoplin.com/posts/progress-bar-in-python/</guid><pubDate>Thu, 05 Jun 2014 08:25:49 GMT</pubDate></item></channel></rss>