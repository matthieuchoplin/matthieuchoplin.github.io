<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Standing on the shoulders of giants (Posts about git)</title><link>http://mattchoplin.com/</link><description></description><atom:link href="http://mattchoplin.com/categories/git.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Sat, 17 Jun 2017 08:26:49 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Git branching strategy</title><link>http://mattchoplin.com/posts/git-branching-strategy.html</link><dc:creator>Matthieu Choplin</dc:creator><description>&lt;div&gt;&lt;div class="section" id="the-git-flow-strategy"&gt;
&lt;h2&gt;The git-flow strategy&lt;/h2&gt;
&lt;p&gt;Very nice cheatsheet: &lt;a class="reference external" href="http://danielkummer.github.io/git-flow-cheatsheet/"&gt;http://danielkummer.github.io/git-flow-cheatsheet/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-centralized-worklow"&gt;
&lt;h2&gt;The centralized worklow&lt;/h2&gt;
&lt;p&gt;Like Subversion, the Centralized Workflow uses a central repository to serve as the single point-of-entry for all changes to the project. Instead of trunk, the default development branch is called master and all changes are committed into this branch. This workflow doesn’t require any other branches besides master.&lt;/p&gt;
&lt;div class="section" id="pros"&gt;
&lt;h3&gt;Pros&lt;/h3&gt;
&lt;p&gt;Developers are always working on the last version of the code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="cons"&gt;
&lt;h3&gt;Cons&lt;/h3&gt;
&lt;p&gt;If some code breaks something, the whole process is stuck, no release can be done.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="feature-branch-workflow"&gt;
&lt;h2&gt;Feature Branch Workflow&lt;/h2&gt;
&lt;p&gt;The core idea behind the Feature Branch Workflow is that all feature development should take place in a dedicated branch instead of the master branch. This encapsulation makes it easy for multiple developers to work on a particular feature without disturbing the main codebase. It also means the master branch will never contain broken code, which is a huge advantage for continuous integration environments.&lt;/p&gt;
&lt;p&gt;Encapsulating feature development also makes it possible to leverage pull requests, which are a way to initiate discussions around a branch. They give other developers the opportunity to sign off on a feature before it gets integrated into the official project. Or, if you get stuck in the middle of a feature, you can open a pull request asking for suggestions from your colleagues. The point is, pull requests make it incredibly easy for your team to comment on each other’s work.&lt;/p&gt;
&lt;p&gt;source: &lt;a class="reference external" href="https://www.atlassian.com/git/workflows"&gt;https://www.atlassian.com/git/workflows&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>git</category><guid>http://mattchoplin.com/posts/git-branching-strategy.html</guid><pubDate>Sun, 13 Jul 2014 11:44:49 GMT</pubDate></item><item><title>Git</title><link>http://mattchoplin.com/posts/git.html</link><dc:creator>Matthieu Choplin</dc:creator><description>&lt;div&gt;&lt;div class="section" id="nice-display-of-the-current-tree"&gt;
&lt;h2&gt;Nice display of the current tree&lt;/h2&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_68e6e7d59bad440bbace9d991399a264-1"&gt;&lt;/a&gt;git log --graph --all --format&lt;span class="o"&gt;=&lt;/span&gt;format:&lt;span class="s2"&gt;"%x09%C(yellow)%h%C(reset) %C(green)%ai%x08%x08%x08%x08%x08%x08%C(reset) %C(bold&lt;/span&gt;
&lt;a name="rest_code_68e6e7d59bad440bbace9d991399a264-2"&gt;&lt;/a&gt;&lt;span class="s2"&gt;white)%cn%C(reset)%C(green)%d%C(reset)%n%x09%C(white)%s%C(reset)"&lt;/span&gt; --abbrev-commit &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;An alternative:&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_1ae424339d9a4eca9a116b117ad4471f-1"&gt;&lt;/a&gt;git log --graph --pretty&lt;span class="o"&gt;=&lt;/span&gt;format:&lt;span class="s1"&gt;'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&amp;lt;%an&amp;gt;%Creset'&lt;/span&gt; --abbrev-commit
&lt;/pre&gt;&lt;p&gt;You can also make an alias. Copy and paste the line below on your terminal:&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_351aae1b2cbe43aabc79868f53cbcf82-1"&gt;&lt;/a&gt;git config --global alias.lg &lt;span class="s2"&gt;"log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&amp;lt;%an&amp;gt;%Creset' --abbrev-commit"&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;And every time you need to see your log, just type in&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_03df70a4e91348599198669530d94e1c-1"&gt;&lt;/a&gt;git lg
&lt;/pre&gt;&lt;p&gt;Or, if you want to see the lines that changed&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_65870daa8ebf45b2b3b5fad41a99dc96-1"&gt;&lt;/a&gt;git lg -p
&lt;/pre&gt;&lt;p&gt;Source: &lt;a class="reference external" href="https://coderwall.com/p/euwpig"&gt;https://coderwall.com/p/euwpig&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;NB: If you want to see a list of aliases set up on your linux box, just type &lt;em&gt;alias&lt;/em&gt; at the prompt.&lt;/p&gt;
&lt;p&gt;Simply add color to your git environment:&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_67b31122010f4f9180853394b8770e2d-1"&gt;&lt;/a&gt;git config --global color.ui auto
&lt;/pre&gt;&lt;p&gt;Source: &lt;a class="reference external" href="http://git-scm.com/book/en/Customizing-Git-Git-Configuration"&gt;http://git-scm.com/book/en/Customizing-Git-Git-Configuration&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tutorial"&gt;
&lt;h2&gt;Tutorial&lt;/h2&gt;
&lt;p&gt;Learn git from your browser: &lt;a class="reference external" href="https://try.github.io/levels/1/challenges/1"&gt;https://try.github.io/levels/1/challenges/1&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="delete-current-tag"&gt;
&lt;h2&gt;Delete current tag&lt;/h2&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_798e28f0e86244f4b34a0a977df16570-1"&gt;&lt;/a&gt;git tag -d &lt;span class="m"&gt;12&lt;/span&gt;.15
&lt;a name="rest_code_798e28f0e86244f4b34a0a977df16570-2"&gt;&lt;/a&gt;git push origin :refs/tags/12.15
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="stash-current-work"&gt;
&lt;h2&gt;Stash current work&lt;/h2&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_3627a322055c4879add59ba9022ca499-1"&gt;&lt;/a&gt;git stash save
&lt;a name="rest_code_3627a322055c4879add59ba9022ca499-2"&gt;&lt;/a&gt;git stash pop
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="push"&gt;
&lt;h2&gt;Push&lt;/h2&gt;
&lt;p&gt;To avoid doing all the time:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_398a8f33ad8a4ca595d5264e2151593b-1"&gt;&lt;/a&gt;git push origin &amp;lt;your-feature-branch&amp;gt;
&lt;/pre&gt;&lt;p&gt;You can do:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_8592a553fb344f36a5e80f225ebf5e76-1"&gt;&lt;/a&gt;git push origin &amp;lt;your-feature-branch&amp;gt; -u
&lt;/pre&gt;&lt;p&gt;You next, you will just have to do:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_99163fc856704e998ee5cc528fc86952-1"&gt;&lt;/a&gt;git push
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="find-which-commit-is-breaking-the-test-with-git-bisect"&gt;
&lt;h2&gt;Find which commit is breaking the test with 'git bisect'&lt;/h2&gt;
&lt;p&gt;You may be in situation where you come back from holidays and find the tests that were passing before broken.&lt;/p&gt;
&lt;p&gt;Git can help to find which commit produced the failure.&lt;/p&gt;
&lt;p&gt;To start bisect, run:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_b50f289e4537440fac66f1486081c7e7-1"&gt;&lt;/a&gt;git bisect start
&lt;/pre&gt;&lt;p&gt;You know that the tests are failing so you indicate it with:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_fb917c8c2ce94925a4dfbab713995147-1"&gt;&lt;/a&gt;git bisect bad
&lt;/pre&gt;&lt;p&gt;You checkout an earlier revision when you know that the tests were passing (git log can help):&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_fb820b6442834996bf798bd6a9a93c21-1"&gt;&lt;/a&gt;git checkout &amp;lt;the_failing_revision&amp;gt;
&lt;/pre&gt;&lt;p&gt;Then run the tests, and if they are passing, indicate it:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_0fffd99693864ce087a5638a158f98c8-1"&gt;&lt;/a&gt;git bisect good
&lt;/pre&gt;&lt;p&gt;Once you have indicated that once it was bad and once it was good. You can leave git bisect do the job automatically:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_774544141650492c859a4b54e2d11be7-1"&gt;&lt;/a&gt;git bisect run &amp;lt;command_that_run_the_tests&amp;gt;
&lt;/pre&gt;&lt;p&gt;You can now grab a coffee and come back few minutes later to see what commit made the tests failed.&lt;/p&gt;
&lt;p&gt;Finally, you also need to come back to the original revision:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_45456a99c2cd4e93bbb1ec23d44fd45b-1"&gt;&lt;/a&gt;git bisect reset
&lt;/pre&gt;&lt;p&gt;Sources:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;first it was JB: &lt;a class="reference external" href="http://tartley.com/"&gt;http://tartley.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://git-scm.com/docs/git-bisect"&gt;http://git-scm.com/docs/git-bisect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.askbjoernhansen.com/2010/04/30/git_bisect_mini_tutorial.html"&gt;http://www.askbjoernhansen.com/2010/04/30/git_bisect_mini_tutorial.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="what-is-the-original-commit-of-a-git-repository"&gt;
&lt;h2&gt;What is the original commit of a git repository?&lt;/h2&gt;
&lt;p&gt;You know &lt;em&gt;git log&lt;/em&gt; to see the history of he commits.&lt;/p&gt;
&lt;p&gt;Once you get the results of git log, you can do 'G' (capital G) to inverse the order of commits and see the first one in time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="revert-all-the-changes-you-did"&gt;
&lt;h2&gt;Revert all the changes you did&lt;/h2&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_d8dd93dcf9ab45a8940d6a47328a3b92-1"&gt;&lt;/a&gt;git checkout -f
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="reduce-the-size-of-a-git-repository-with-the-garbage-collector"&gt;
&lt;h2&gt;Reduce the size of a git repository with the garbage collector&lt;/h2&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_9c86ae3ce2614624aed28628639f3047-1"&gt;&lt;/a&gt;git gc
&lt;/pre&gt;&lt;p&gt;Source:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://stackoverflow.com/questions/2116778/reduce-git-repository-size"&gt;http://stackoverflow.com/questions/2116778/reduce-git-repository-size&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.kernel.org/pub/software/scm/git/docs/git-gc.html"&gt;https://www.kernel.org/pub/software/scm/git/docs/git-gc.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>git</category><guid>http://mattchoplin.com/posts/git.html</guid><pubDate>Fri, 06 Jun 2014 16:09:03 GMT</pubDate></item></channel></rss>